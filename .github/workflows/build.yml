name: Build

on:
  push:
    branches:
      - "master"
    tags:
      - "v*"
  pull_request:
    branches:
      - "master"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    container:
      image: node:18
    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: yarn install --frozen-lockfile
      - name: Test
        run: yarn test
      - name: Check formatting
        run: yarn lint
      - name: Build dist
        run: yarn run build
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Build docs
        run: yarn run docs
      - uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: test-and-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - uses: actions/download-artifact@v3
        with:
          name: docs
          path: docs/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-staging-if-needed:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Trigger staging to redeploy
        env:
          REDEPLOY_WEBHOOK_URL: ${{ secrets.REDEPLOY_WEBHOOK_URL }}
        run: curl -I -s -L -X POST "$REDEPLOY_WEBHOOK_URL"
