name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
     image: node:18
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      -
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      -
        name: Install packages
        run: yarn install --frozen-lockfile
      -
        name: Test
        run: yarn test
      -
        name: Check formatting
        run: yarn lint
      -
        name: Build dist
        run: yarn run build
      -
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
      -
        name: Build docs
        run: yarn run docs
      -
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        uses: actions/download-artifact@v3
        with:
          name: dist
      -
        uses: actions/download-artifact@v3
        with:
          name: docs
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: financier-io/financier:latest
      - 
        name: Install curl
        run: sudo apt-get install -y curl
      -
        name: Trigger staging to redeploy
        run: curl -I -s -L -X POST "$REDEPLOY_WEBHOOK_URL"
