image: node:18

stages:
  - install
  - lint
  - test
  - build
  - deploy
  - clean_up

install:
  stage: install
  script:
    - yarn
  cache:
    key: ${CI_BUILD_ID}
    paths:
      - node_modules
  artifacts:
    paths:
      - node_modules/

lint:
  stage: lint
  script:
    - yarn run lint

test:
  stage: test
  script:
    - yarn test

build:
  stage: build
  script:
    - yarn run build
    - yarn run docs
  artifacts:
    paths:
      - dist/
      - docs/

deploy:
  stage: deploy
  only:
    - master
  image: docker:git
  services:
    - docker:dind
  script:
    - COMMIT=${CI_BUILD_REF::8}

    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

    - export TAG=`if [ "$CI_BUILD_REF_NAME" == "master" ]; then echo "latest"; else echo $CI_BUILD_REF_NAME ; fi`

    - docker build -f Dockerfile -t $CI_REGISTRY_IMAGE:$COMMIT .

    - docker tag $CI_REGISTRY_IMAGE:$COMMIT $CI_REGISTRY_IMAGE:$TAG

    - docker tag $CI_REGISTRY_IMAGE:$COMMIT $CI_REGISTRY_IMAGE:gitlab-$CI_BUILD_ID

    - docker push $CI_REGISTRY_IMAGE:$TAG
    - docker push $CI_REGISTRY_IMAGE:$COMMIT
    - docker push $CI_REGISTRY_IMAGE:gitlab-$CI_BUILD_ID

    - apk upgrade --no-cache libcurl && apk add --no-cache curl
    - curl -I -s -L -X POST $REDEPLOY_WEBHOOK_URL
  when: on_success

clean_up_job:
  stage: clean_up
  script:
    - rm -rf node_modules
    - rm -rf ~/.node-gyp
  when: on_failure
